load_all()
source("~/Desktop/test.R", echo=TRUE)
load_all()
s <- Slurm()
install()
s <- Slurm()
load_all()
s <- Slurm()
load_all()
s <- Slurm()
load_all()
s <- Slurm()
load_all()
load_all()
load_all()
load_all()
load_all()
s <- Slurm()
load_all()
s <- Slurm()
load_all()
s <- Slurm()
load_all()
s <- Slurm()
load_all()
s <- Slurm()
s <- Slurm()
load_all()
s <- Slurm()
load_all()
s <- Slurm()
load_all()
s <- Slurm()
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
s <- Slurm(job_name = "job1")
s <- Slurm(job_name = "job1")
load_all()
s <- Slurm(job_name = "job1")
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
s <- Slurm(job_name = "job1")
s <- Slurm(job_name = "job1",
account = "my_account")
s <- Slurm(job_name = "job1")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
sub("\n.*(<-|=)[ ]*Slurm(.*)", "", "s <- Slurm(job_name = "job1",
sub("\n.*(<-|=)[ ]*Slurm(.*)", "", "s <- Slurm(job_name = 'job1',
account = "my_account")
sub("\n.*(<-|=)[ ]*Slurm(.*)", "", "o")
sub("\n.*(<-|=)[ ]*Slurm(.*)", "", "test = Slurm")
sub("library\([\"']?HPCmanager[\"']?\)", "", "library(HPCmanager)")
sub("library([\"']?HPCmanager[\"']?)", "", "library(HPCmanager)")
sub("library(["']?HPCmanager["']?)", "", "library(HPCmanager)")
sub("library([\"']?HPCmanager[\"']?)", "", "library(HPCmanager)")
sub("library(HPCmanager)", "", "library(HPCmanager)")
sub("library(HPCmanager)", "", "library(HPCmanager)")
sub("library(HPCmanager) v", "", "library(HPCmanager)")
sub("library[(][\"']?HPCmanager[\"']?[)]", "", "library(HPCmanager)")
sub("library[(][\"']?HPCmanager[\"']?[)]", "", "library(\"HPCmanager\")")
sub("\n.*(<-|=)[ ]*Slurm[(].*[)]", "", "s=Slurm()")
sub("\n.*(<-|=)[ ]*Slurm[(].*[)]", "", "s = Slurm()")
sub("\n.*(<-|=)[ ]*Slurm[(].*[)]", "", "\ns = Slurm()")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
install()
install()
install()
load_all()
load_all()
install()
load_all()
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
library(HPCmanager)
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
install()
install()
install()
install()
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
sub("\n[0-9A-z_. ]*(?:<-|=)[ ]*Slurm[(][A-z0-9= \"',\n]*[)]", "", "\n\ns <- Slurm(job_name = \"job1\",\n           account = \"my_account\")\n\nsomething <- 1")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
install()
install()
install()
load_all()
Slurm(job_name = "job1",
account = "my_account",
partition = "test")
install()
install()
load_all()
load_all()
Slurm(job_name = "job1",
account = "my_account",
partition = "test")
load_all()
Slurm(job_name = "job1",
account = "my_account",
partition = "test")
paste0("a","b", collapse = "/n")
paste0("a","b", collapse = "\n")
paste0(c("a","b"), collapse = "\n")
document()
check()
check()
check()
check()
check()
document()
document()
check()
check()
mn <- min(c(1,3,5,NA), rm.na=TRUE)
mn <- min(c(1,3,5,NA), na.rm=TRUE)
check()
check()
document()
document()
check()
document()
check()
document()
check()
install()
check()
install()
install()
install()
install()
document()
check()
document()
document()
check()
install()
install()
install()
install()
install()
Rscript --help
check()
use_package("glue")
check()
check()
install()
install()
install()
install()
install()
install()
install()
install()
install()
install()
check()
install()
install()
install()
install()
install()
install()
install()
install()
install()
install()
install()
install()
install()
install()
install()
check()
install()
install()
check()
check()
check()
check()
check()
install()
# Get the path to 'this' R script and get its contents as a string
script_path <- get_script_path()
# Get the path to 'this' R script and get its contents as a string
script_path <- HPCmanager::get_script_path()
# Get the path to 'this' R script and get its contents as a string
script_path <- HPCmanager:::get_script_path()
HPCmanager:::get_script_path()
HPCmanager:::get_script_path()
foo<- readLines("/Users/nicholassunderland/Desktop/test_run.R")
foo
foo<- readLines("/Users/nicholassunderland/Desktop/test.R")
foo
grep("#SBATCH", foo)
idxs=grep("#SBATCH", foo)
foo[-(1:3)]
foo[-(idxs[1]:idxs[2])]
install()
install()
check()
1:4
0:19
typeof(1:4)
foo=1
glue::glue("test {if foo=1 "yes" else "no"} this")
glue::glue("test {if(foo=1){ "yes" } else { "no" }} this")
account <- if(length(foo) > 0) glue("#SBATCH --chdir={.Object@directory}") else ""
library(glue)
account <- if(length(foo) > 0) glue("#SBATCH --chdir={.Object@directory}") else ""
account <- if(length(foo) > 0) glue("#SBATCH --chdir=test) else ""
)
รง
account <- if(length(foo) > 0) glue("#SBATCH --chdir=test") else ""
account
arr=1:3
array <- if(length(.Object@array) > 0) glue("#SBATCH --array={arr}") else ""
array <- if(length(arr) > 0) glue("#SBATCH --array={arr}") else ""
if(length(arr) > 0) glue("#SBATCH --array={arr}") else ""
if(length(arr) > 0) glue("#SBATCH --array={paste0(arr, collapse=",")}") else ""
if(length(arr) > 0) glue("#SBATCH --array={paste0(arr, collapse=",")}") else ""
paste0(arr, collapse=",")
if(length(arr) > 0) glue("#SBATCH --array={paste0(arr, collapse=",")}") else ""
paste0(integer(), collapse=",")
length(paste0(integer(), collapse=","))
if(length(arr) > 0) glue("#SBATCH --array={paste0(arr, collapse=",")}") else ""
arr <- c(1, 2, 3)  # Replace with your actual array
array_line <- if (length(arr) > 0) {
glue("#SBATCH --array={paste0(arr, collapse=',')}")
} else {
""
}
if(length(arr) > 0) glue("#SBATCH --array={paste0(arr, collapse=',')}") else ""
check()
check()
install()
install()
install()
install()
# Set the valid run parameters
valid.run.parameters <- c( "SLURM_ARRAY_TASK_ID" )
parameter_name="SLURM_ARRAY_TASK_ID"
# make sure parameter is valid
stopifnot(paste("Parameter", parameter_name, "not one of the valid parameters:", paste(valid.run.parameters)),
parameter_name %in% valid.run.parameters)
# make sure parameter is valid
stopifnot(paste("Parameter", parameter_name, "not one of the valid parameters:", paste(valid.run.parameters)) =
# make sure parameter is valid
stopifnot(parameter_name %in% valid.run.parameters = paste("Parameter", parameter_name, "not one of the valid parameters:", paste(valid.run.parameters)))
# make sure parameter is valid
stopifnot((parameter_name %in% valid.run.parameters) = paste("Parameter", parameter_name, "not one of the valid parameters:", paste(valid.run.parameters)))
# make sure parameter is valid
stopifnot(parameter_name %in% valid.run.parameters)
parameter_name %in% valid.run.parameters
# make sure parameter is valid
stopifnot(paste("Parameter", parameter_name, "not one of the valid parameters:", paste(valid.run.parameters)) = parameter_name %in% valid.run.parameters)
# make sure parameter is valid
stopifnot(paste("Parameter", parameter_name, "not one of the valid parameters:", paste(valid.run.parameters)) = (parameter_name %in% valid.run.parameters))
stopifnot(param_msg = (parameter_name %in% valid.run.parameters))
# make sure parameter is valid
param_msg = paste("Parameter", parameter_name, "not one of the valid parameters:", paste(valid.run.parameters))
stopifnot(param_msg = (parameter_name %in% valid.run.parameters))
parameter_name="foo"
stopifnot(param_msg = (parameter_name %in% valid.run.parameters))
# make sure parameter is valid
stopifnot("Not a valid parameter_name" = parameter_name %in% valid.run.parameters)
# Set the valid run parameters
valid.run.parameters <- c( "SLURM_ARRAY_TASK_ID" = as.integer )
document()
document()
install()
install()
install()
install()
install()
run.arguments = "--SLURM_ARRAY_TASK_ID=3"
run.arguments = list("--SLURM_ARRAY_TASK_ID=3")
# Loop each argument if and only if there are arguments
if( length( run.arguments ) > 0 ) {
for ( i in 1:length( run.arguments ) ) {
# Validate if it has the --parameter=argument structure
if (substr(run.arguments[i], 1, 2) == "--" && grepl("=", run.arguments[i], fixed=TRUE)) {
# extract the key value pairs
key.pair <- strsplit(run.arguments[i], "=", fixed = TRUE)[[1]]
run.parameter <- substr(key.pair[1], 3)
run.argument <- key.pair[2]
# convert the argument to the correct type
run.argument <- valid.run.parameters[parameter_name](run.argument)
# return
print(run.argument)
#return(run.argument)
}
}
}
length( run.arguments )
i=1
run.arguments[i], 1, 2)
run.arguments[i]
substr(run.arguments[i], 1, 2)
substr(run.arguments[i], 1, 2) == "--"
grepl("=", run.arguments[i], fixed=TRUE)
(substr(run.arguments[i], 1, 2) == "--" && grepl("=", run.arguments[i], fixed=TRUE))
strsplit(run.arguments[i], "=", fixed = TRUE)[[1]]
run.arguments[i]
strsplit(run.arguments[i], "=", fixed = TRUE)
run.arguments = c("--SLURM_ARRAY_TASK_ID=3")
length( run.arguments ) > 0
substr(run.arguments[i], 1, 2) == "--" && grepl("=", run.arguments[i], fixed=TRUE)
strsplit(run.arguments[i], "=", fixed = TRUE)[[1]]
key.pair <- strsplit(run.arguments[i], "=", fixed = TRUE)[[1]]
run.parameter <- substr(key.pair[1], 3)
substr(key.pair[1], 3)
key.pair[1]
substring(key.pair[1], 3)
run.parameter <- substr(key.pair[1], first=3)
substring(key.pair[1], first=3)
substring(key.pair[1], first=3)
key.pair[2]
# Loop each argument if and only if there are arguments
if( length( run.arguments ) > 0 ) {
for ( i in 1:length( run.arguments ) ) {
# Validate if it has the --parameter=argument structure
if (substr(run.arguments[i], 1, 2) == "--" && grepl("=", run.arguments[i], fixed=TRUE)) {
# extract the key value pairs
key.pair <- strsplit(run.arguments[i], "=", fixed = TRUE)[[1]]
# remove the '--' prefix from the parameter
run.parameter <- substring(key.pair[1], first=3)
run.argument <- key.pair[2]
# convert the argument to the correct type
run.argument <- valid.run.parameters[parameter_name](run.argument)
# return
print(run.argument)
#return(run.argument)
}
}
}
valid.run.parameters[parameter_name]
# Set the valid run parameters
valid.run.parameters <- c( "SLURM_ARRAY_TASK_ID" = as.integer )
# Set the valid run parameters
valid.run.parameters <- c( "SLURM_ARRAY_TASK_ID" = as.integer )
# convert the argument to the correct type
run.argument <- valid.run.parameters[parameter_name](run.argument)
valid.run.parameters[parameter_name]
valid.run.parameters <- c( "SLURM_ARRAY_TASK_ID" = as.integer )
parameter_name="SLURM_ARRAY_TASK_ID"
valid.run.parameters[parameter_name]
valid.run.parameters[parameter_name](run.argument)
valid.run.parameters[parameter_name]
run.argument
valid.run.parameters[parameter_name]
valid.run.parameters[[parameter_name]](run.argument)
check()
check()
install()
install()
install()
install()
directory = "."
warnings()
directory = "."
directory[1]
basename("/get/file.R")\
basename("/get/file.R")
document()
# Get the path to 'this' R script and get its contents as a string
script_path <- get_script_path()
get_script_path()
load_all()
get_script_path()
install()
install()
install()
install()
document()
load_all()
document()
document()
document()
document()
document()
document()
document()
document()
document()
load_all()
use_r("RSlurm")
use_r("class_r_slurm")
document()
load_all()
library(HPCmanager)
rs <- RSlurm(job_name = "test", account = "test_acc")
load_all()
rs <- RSlurm(job_name = "test", account = "test_acc")
load_all()
load_all()
rs <- RSlurm(job_name = "test", account = "test_acc")
rs
rs <- RSlurm(job_name = "test")
rs <- RSlurm(job_name = "test", account = "test_acc", rscript_options="hello")
rs
load_all()
rs <- RSlurm(job_name = "test", account = "test_acc", rscript_options="hello")
rs <- RSlurm(job_name = "test", account = "test_acc", rscript_options="hello")
load_all()
rs <- RSlurm(job_name = "test", account = "test_acc", rscript_options="hello")
rs
load_all()
rs <- RSlurm(job_name = "test", account = "test_acc", rscript_options="hello")
rs
load_all()
rs <- RSlurm(job_name = "test", account = "test_acc", rscript_options="hello")
rs
load_all()
rs <- RSlurm(job_name = "test", account = "test_acc", rscript_options="hello")
rs <- RSlurm(job_name = "test", account = "test_acc", rscript_options="hello", test="T")
rs
load_all()
rs <- RSlurm(job_name = "test", account = "test_acc", rscript_options="hello", test="T")
rs
load_all()
document()
load_all()
document()
load_all()
rs <- RSlurm(job_name = "test", account = "test_acc", rscript_options="hello", test="T")
rs <- RSlurm(job_name = "test", account = "test_acc", rscript_options="hello")
load_all()
rs <- RSlurm(job_name = "test", account = "test_acc", rscript_options="hello")
rs
create_slurm_header(rs)
load_all()
rs <- RSlurm(job_name = "test", account = "test_acc", rscript_options="hello")
create_slurm_header(rs)
load_all()
rs <- RSlurm(job_name = "test", account = "test_acc", rscript_options="hello")
rs
create_slurm_header(rs)
cat(create_slurm_header(rs))
rs <- RSlurm(job_name = "test", account = "test_acc", rscript_options="hello")
rs
cat(create_slurm_header(rs))
load_all()
load_all()
load_all()
rs <- RSlurm(job_name = "test", account = "test_acc", rscript_options="hello")
load_all()
document()
document()
document()
document()
document()
check()
check()
check()
install()
library(devtools)
use_readme_rmd()
