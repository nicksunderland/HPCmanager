job_name = "character",
nodes = "numeric",
tasks_per_node = "numeric",
cpu_per_task = "numeric",
max_time = "Lubridate"
)
)
#' @slot nodes numeric.
#' @slot tasks_per_node numeric.
#' @slot cpu_per_task numeric.
#' @slot max_time lubridate duration
#'
#' @return a Slurm object
#' @importFrom Lubridate function
#' @export
#'
#' @examples
Slurm <- setClass(
Class = "Slurm",
slots = list(
job_name = "character",
nodes = "numeric",
tasks_per_node = "numeric",
cpu_per_task = "numeric",
max_time = "lubridate"
)
)
document()
document()
rm(list = c("Slurm"))
document()
document()
document()
document()
load_all()
Slurm(job_name = "testname", account = "xx20081")
job = Slurm(job_name = "testname", account = "xx20081")
queue(job)
load_all()
Slurm(job_name = "testname", account = "xx20081")
job=Slurm(job_name = "testname", account = "xx20081")
queue(job)
check()
use_package("lubridate")
use_package("methods")
check()
use_mit_license()
check()
load_all()
s = Slurm(job_name = "my_job", account = "my_account")
write_preamble(s)
text = write_preamble(s)
text
l = lubridate::duration(6.5,units="days")
duration(l, units="seconds")
lubridate::duration(l, units="seconds")
document()
document()
document()
document()
load_all()
s = Slurm(job_name = "my_job", account = "my_account")
print(write_preamble(s))
load_all()
s = Slurm(job_name = "my_job", account = "my_account")
print(write_preamble(s))
load_all()
document()
s = Slurm(job_name = "my_job", account = "my_account")
write_preamble(s)
print(write_preamble(s))
getSrcFilename
Slurm <- setClass(
Class = "Slurm",
slots = list(
job_name = "character",
account = "character",
partition = "character",
nodes = "integer",
tasks_per_node = "integer",
cpu_per_task = "integer",
max_time = "Duration",
mem_per_cpu = "integer",
preamble = "character"
# https://slurm.schedmd.com/archive/slurm-16.05.8/sbatch.html
# --dependency
# Set example, set this job to only start after another job has finished. This can be useful if you have a complex workflow which has certain parts depending on others.
# --workdir
# Set the working directory of your script. By default this will be the directory in which you run sbatch.
# --output and --error
# Set the output of the standard output and error streams of your job.
# --exclusive
# Make sure that this job has sole use of any nodes it runs on.
# --gres
),
prototype = list(
job_name = character(),
account = character(),
partition = "cpu",
nodes = 2L,
tasks_per_node = 2L,
cpu_per_task = 1L,
max_time = lubridate::duration(1, units="days"),
mem_per_cpu = 100L,
preamble = character()
)
)
getSrcFilename(Slurm)
here <- function() {
cmdArgs <- commandArgs(trailingOnly = FALSE)
if (length(grep("^-f$", cmdArgs)) > 0) {
# R console option
normalizePath(dirname(cmdArgs[grep("^-f", cmdArgs) + 1]))[1]
} else if (length(grep("^--file=", cmdArgs)) > 0) {
# Rscript/R console option
scriptPath <- normalizePath(dirname(sub("^--file=", "", cmdArgs[grep("^--file=", cmdArgs)])))[1]
} else if (Sys.getenv("RSTUDIO") == "1") {
if (rstudioapi::isAvailable(version_needed=NULL,child_ok=FALSE)) {
# RStudio interactive
dirname(rstudioapi::getSourceEditorContext()$path)
} else if (is.null(knitr::current_input(dir = TRUE)) == FALSE) {
# Knit
knitr::current_input(dir = TRUE)
} else {
# R markdown on RStudio
getwd()
}
} else if (is.null(attr(stub, "srcref")) == FALSE) {
# 'source'd via R console
dirname(normalizePath(attr(attr(stub, "srcref"), "srcfile")$filename))
} else {
stop("Cannot find file path")
}
}
here()
check()
rm(list = c("Slurm"))
use_package("glue")
check()
document()
document()
document()
check()
rm(list = c("here"))
check()
document()
document()
check()
use_package("knitr")
use_package("rstudioapi")
check()
check()
library(rstudioapi)
check()
install()
install()
check()
check()
install()
nstall()
install()
devtools::install()
devtools::install()
library(devtools)
check()
check()
document()
document()
document()
document()
document()
setMethod(
f = "initialize",
signature = c(object="Slurm"),
definition =function(object, ...) {
object@test_path <- here()
object <- callNextMethod(...)
validObject(object)
return(object)
})
document()
document()
document()
load_all()
load_all()
load_all()
document()
document()
load_all()
check()
document()
document()
check()
check()
document()
install()
install()
libr
library(devtools)
devtools::install()
uninstall()
devtools::install()
readRDS(dest)
document()
devtools::install()
install()
check()
install()
trace(readRDS, quote(print(ls.str())))
install()
install()
check()
document()
check()
install()
library(HPCmanager)
s = Slurm()
print(s@test_path)
check()
install()
install()
install.packages("glue")
install.packages("glue")
library(HPCmanager)
s = Slurm()
print(s@test_path)
library(HPCmanager)
s = Slurm()
print(s@test_path)
install()
devtools::install()
devtools::install()
check()
devtools::check()
HPCmanager::Slurm()
library(devtools)
load_all()
HPCmanager::Slurm()
load_all()
HPCmanager::Slurm()
load_all()
HPCmanager::Slurm()
load_all()
HPCmanager::Slurm()
load_all()
HPCmanager::Slurm()
load_all()
HPCmanager::Slurm()
load_all()
HPCmanager::Slurm()
load_all()
HPCmanager::Slurm()
load_all()
HPCmanager::Slurm()
s = Slurm()
print(s@test_path)
s = Slurm()
print(s@test_path)
source("~/Desktop/test.R", echo=TRUE)
source("~/Desktop/test.R", echo=TRUE)
getwd()
load_all()
s = Slurm()
print(s@test_path)
source("~/Desktop/test.R", echo=TRUE)
source("~/Desktop/test.R", echo=TRUE)
s = Slurm()
print(s@test_path)
load_all()
s = Slurm()
print(s@test_path)
fi <- tempfile()
writeLines("f()", fi)
f <- function() print(sys.frame(-4)$srcfile)
source(fi)
fi
sys.frame(-4)
fi <- tempfile()
writeLines("f()", fi)
sys.frame(-4)
sys.frame()
sys.frame(-1)
sys.frame(1)
fi <- tempfile()
writeLines("f()", fi)
f <- function() print(sys.frame(-4)$srcfile)
source(fi)
fi
install.packages("here")
library(here)
here()
source("~/Desktop/test.R", echo=TRUE)
source("~/Desktop/test.R", echo=TRUE)
source("~/Desktop/test.R", echo=TRUE)
library(tidyverse)
install.packages("tidyverse")
install.packages("funr")
library(funr)
get_script_path()
source("~/Desktop/test.R", echo=TRUE)
source("~/Desktop/test.R", echo=TRUE)
use_r("get_script_path")
document()
document()
load_all()
s <- Slurm()
load_all()
s <- Slurm()
load_all()
s <- Slurm()
load_all()
s <- Slurm()
check()
install()
install()
install()
install()
install()
source("~/Desktop/test.R", echo=TRUE)
source("~/Desktop/test.R", echo=TRUE)
install()
source("~/Desktop/test.R", echo=TRUE)
library(HPCmanager)
s <- Slurm()
s <- Slurm()
source("~/Desktop/test.R", echo=TRUE)
install()
source("~/Desktop/test.R", echo=TRUE)
source("~/Desktop/test.R", echo=TRUE)
install()
document()
install()
source("~/Desktop/test.R", echo=TRUE)
source("~/Desktop/test.R", echo=TRUE)
install()
install()
install()
source("~/git/HPCmanager/R/get_script_path.R", echo=TRUE)
rm(get_script_path())
rm(get_script_path
)
source("~/Desktop/test.R", echo=TRUE)
source("~/Desktop/test.R", echo=TRUE)
install()
install()
library(HPCmanager)
library(HPCmanager)
library(HPCmanager)
a=Slurm()
install()
install()
check()
install()
install()
install()
document()
document()
document()
check()
check()
check()
devtools::check()
devtools::check()
use_package("rstudioapi")
devtools::check()
install()
source("~/Desktop/test.R", echo=TRUE)
library(HPCmanager)
s <- Slurm()
print(s@test_path)
use_r("utils")
document()
document()
check()
check()
check()
check()
source("~/Desktop/test.R", echo=TRUE)
load_all()
Slurm()
load_all()
Slurm()
load_all()
Slurm()
library(HPCmanager)
s <- Slurm()
paste0(c("1", "d"), collapse = "/n")
paste0(c("1", "d"), collapse = "\n")
cat(c("1", "d"), sep = "\n")
?cat
install()
install()
install()
install()
load_all()
document()
document()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
document()
document()
check()
check()
s <- Slurm()
load_all()
source("~/Desktop/test.R", echo=TRUE)
load_all()
s <- Slurm()
install()
s <- Slurm()
load_all()
s <- Slurm()
load_all()
s <- Slurm()
load_all()
s <- Slurm()
load_all()
load_all()
load_all()
load_all()
load_all()
s <- Slurm()
load_all()
s <- Slurm()
load_all()
s <- Slurm()
load_all()
s <- Slurm()
load_all()
s <- Slurm()
s <- Slurm()
load_all()
s <- Slurm()
load_all()
s <- Slurm()
load_all()
s <- Slurm()
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
s <- Slurm(job_name = "job1")
s <- Slurm(job_name = "job1")
load_all()
s <- Slurm(job_name = "job1")
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
s <- Slurm(job_name = "job1")
s <- Slurm(job_name = "job1",
account = "my_account")
s <- Slurm(job_name = "job1")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
sub("\n.*(<-|=)[ ]*Slurm(.*)", "", "s <- Slurm(job_name = "job1",
sub("\n.*(<-|=)[ ]*Slurm(.*)", "", "s <- Slurm(job_name = 'job1',
account = "my_account")
sub("\n.*(<-|=)[ ]*Slurm(.*)", "", "o")
sub("\n.*(<-|=)[ ]*Slurm(.*)", "", "test = Slurm")
sub("library\([\"']?HPCmanager[\"']?\)", "", "library(HPCmanager)")
sub("library([\"']?HPCmanager[\"']?)", "", "library(HPCmanager)")
sub("library(["']?HPCmanager["']?)", "", "library(HPCmanager)")
sub("library([\"']?HPCmanager[\"']?)", "", "library(HPCmanager)")
sub("library(HPCmanager)", "", "library(HPCmanager)")
sub("library(HPCmanager)", "", "library(HPCmanager)")
sub("library(HPCmanager) v", "", "library(HPCmanager)")
sub("library[(][\"']?HPCmanager[\"']?[)]", "", "library(HPCmanager)")
sub("library[(][\"']?HPCmanager[\"']?[)]", "", "library(\"HPCmanager\")")
sub("\n.*(<-|=)[ ]*Slurm[(].*[)]", "", "s=Slurm()")
sub("\n.*(<-|=)[ ]*Slurm[(].*[)]", "", "s = Slurm()")
sub("\n.*(<-|=)[ ]*Slurm[(].*[)]", "", "\ns = Slurm()")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
install()
install()
install()
load_all()
load_all()
install()
load_all()
load_all()
s <- Slurm(job_name = "job1",
account = "my_account")
